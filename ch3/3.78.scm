; Consider the problem of deisgning a signal-processing system to study the homogeneous second-order linear differential equation:
;
; d^2y/dt^2 - a(dy/dt) - by = 0. 
;
; The output stream, modeling y, is generated by a network that contains a loop. This is because the value of d^2y/dt^2 depends upon the
; values of y and dy/dt and both of these are determined by integrating d^2y/dt^2. The diagram we would like to encode is shown in figure 3.35.
; Write a solve-2nd that takes as arguments the constants a, b, and dt and initial values y0 and dy0 for y and dy/dt and generates
; the stream of successive values of y.
; ======
; This is one of those that makes me wish my math were less rusty so I could come up with some good test cases. We'll plunge into
; it anyway, modeling on solve from 3.77 and see what we come up with
;
; The flow diagram helps. We have to define y, dy, and ddy. y is the integral with initial value of y0 and integrand of dy.
; dy is the integral with initial value dy0 and integrand of ddy. ddy is the stream you get by scaling dy and y by a and b, 
; respectively, and adding them together.
;
; And, of course, we run into the delay/force issues, so we need to delay the integands.

(define (solve-2nd a b dt y0 dy0)
    (define y (integral (delay dy) y0 dt))
    (define dy (integral (delay ddy) dy0 dt))
    (define ddy (add-streams (scale-stream dy a)
                             (scale-stream y b)))
    y)

; Now I just wish I knew what a reasonable test would be.
; I did some looking around, but I'm going to move on since how second-order differential equations work is hardly central 
; to understanding delay and force and I haven't found any simple or even moderately complex examples to test with.